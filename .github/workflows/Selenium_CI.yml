# This workflow will run the tests with pytest and generate a test unit report

name: selenium-python

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]


permissions: # This is where we set permissions for the workflow specifically to write junit results
  contents: write 
  checks: write

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip 
        pip install pytest pytest-cov pytest_bdd selenium

    - name: Download and set up geckodriver
      run: |
        mkdir -p drivers
        wget https://github.com/mozilla/geckodriver/releases/download/v0.30.0/geckodriver-v0.30.0-linux64.tar.gz -O geckodriver.tar.gz
        tar -xzf geckodriver.tar.gz -C drivers
        chmod +x drivers/geckodriver

    - name: Run tests with coverage
      run: |
        python -m pytest --verbose --junitxml=report.xml # create junit xml report with pytest

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3 # use this action to publish the junit report
      if: success() || failure() # Ensure to publish the report regardless of any failures in previous steps in the workflow
      with:
        report_paths: '**/junit.xml' # path to the junit report
        detailed_summary: true # provide a detailed summary of the test results
        include_passed: true # include passed tests in the report
